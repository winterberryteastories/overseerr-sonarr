/*
 * Sonarr
 *
 * Sonarr API docs - The v3 API docs apply to both v3 and v4 versions of Sonarr. Some functionality may only be available in v4 of the Sonarr application.
 *
 * The version of the OpenAPI document: v4.0.12.2823
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ParsedEpisodeInfo {
    #[serde(rename = "releaseTitle", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub release_title: Option<Option<String>>,
    #[serde(rename = "seriesTitle", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub series_title: Option<Option<String>>,
    #[serde(rename = "seriesTitleInfo", skip_serializing_if = "Option::is_none")]
    pub series_title_info: Option<Box<models::SeriesTitleInfo>>,
    #[serde(rename = "quality", skip_serializing_if = "Option::is_none")]
    pub quality: Option<Box<models::QualityModel>>,
    #[serde(rename = "seasonNumber", skip_serializing_if = "Option::is_none")]
    pub season_number: Option<i32>,
    #[serde(rename = "episodeNumbers", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub episode_numbers: Option<Option<Vec<i32>>>,
    #[serde(rename = "absoluteEpisodeNumbers", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub absolute_episode_numbers: Option<Option<Vec<i32>>>,
    #[serde(rename = "specialAbsoluteEpisodeNumbers", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub special_absolute_episode_numbers: Option<Option<Vec<f64>>>,
    #[serde(rename = "airDate", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub air_date: Option<Option<String>>,
    #[serde(rename = "languages", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub languages: Option<Option<Vec<models::Language>>>,
    #[serde(rename = "fullSeason", skip_serializing_if = "Option::is_none")]
    pub full_season: Option<bool>,
    #[serde(rename = "isPartialSeason", skip_serializing_if = "Option::is_none")]
    pub is_partial_season: Option<bool>,
    #[serde(rename = "isMultiSeason", skip_serializing_if = "Option::is_none")]
    pub is_multi_season: Option<bool>,
    #[serde(rename = "isSeasonExtra", skip_serializing_if = "Option::is_none")]
    pub is_season_extra: Option<bool>,
    #[serde(rename = "isSplitEpisode", skip_serializing_if = "Option::is_none")]
    pub is_split_episode: Option<bool>,
    #[serde(rename = "isMiniSeries", skip_serializing_if = "Option::is_none")]
    pub is_mini_series: Option<bool>,
    #[serde(rename = "special", skip_serializing_if = "Option::is_none")]
    pub special: Option<bool>,
    #[serde(rename = "releaseGroup", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub release_group: Option<Option<String>>,
    #[serde(rename = "releaseHash", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub release_hash: Option<Option<String>>,
    #[serde(rename = "seasonPart", skip_serializing_if = "Option::is_none")]
    pub season_part: Option<i32>,
    #[serde(rename = "releaseTokens", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub release_tokens: Option<Option<String>>,
    #[serde(rename = "dailyPart", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub daily_part: Option<Option<i32>>,
    #[serde(rename = "isDaily", skip_serializing_if = "Option::is_none")]
    pub is_daily: Option<bool>,
    #[serde(rename = "isAbsoluteNumbering", skip_serializing_if = "Option::is_none")]
    pub is_absolute_numbering: Option<bool>,
    #[serde(rename = "isPossibleSpecialEpisode", skip_serializing_if = "Option::is_none")]
    pub is_possible_special_episode: Option<bool>,
    #[serde(rename = "isPossibleSceneSeasonSpecial", skip_serializing_if = "Option::is_none")]
    pub is_possible_scene_season_special: Option<bool>,
    #[serde(rename = "releaseType", skip_serializing_if = "Option::is_none")]
    pub release_type: Option<models::ReleaseType>,
}

impl ParsedEpisodeInfo {
    pub fn new() -> ParsedEpisodeInfo {
        ParsedEpisodeInfo {
            release_title: None,
            series_title: None,
            series_title_info: None,
            quality: None,
            season_number: None,
            episode_numbers: None,
            absolute_episode_numbers: None,
            special_absolute_episode_numbers: None,
            air_date: None,
            languages: None,
            full_season: None,
            is_partial_season: None,
            is_multi_season: None,
            is_season_extra: None,
            is_split_episode: None,
            is_mini_series: None,
            special: None,
            release_group: None,
            release_hash: None,
            season_part: None,
            release_tokens: None,
            daily_part: None,
            is_daily: None,
            is_absolute_numbering: None,
            is_possible_special_episode: None,
            is_possible_scene_season_special: None,
            release_type: None,
        }
    }
}

