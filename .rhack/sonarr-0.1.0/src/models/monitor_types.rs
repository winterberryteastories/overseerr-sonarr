/*
 * Sonarr
 *
 * Sonarr API docs - The v3 API docs apply to both v3 and v4 versions of Sonarr. Some functionality may only be available in v4 of the Sonarr application.
 *
 * The version of the OpenAPI document: v4.0.12.2823
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum MonitorTypes {
    #[serde(rename = "unknown")]
    Unknown,
    #[serde(rename = "all")]
    All,
    #[serde(rename = "future")]
    Future,
    #[serde(rename = "missing")]
    Missing,
    #[serde(rename = "existing")]
    Existing,
    #[serde(rename = "firstSeason")]
    FirstSeason,
    #[serde(rename = "lastSeason")]
    LastSeason,
    #[serde(rename = "latestSeason")]
    LatestSeason,
    #[serde(rename = "pilot")]
    Pilot,
    #[serde(rename = "recent")]
    Recent,
    #[serde(rename = "monitorSpecials")]
    MonitorSpecials,
    #[serde(rename = "unmonitorSpecials")]
    UnmonitorSpecials,
    #[serde(rename = "none")]
    None,
    #[serde(rename = "skip")]
    Skip,

}

impl std::fmt::Display for MonitorTypes {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Unknown => write!(f, "unknown"),
            Self::All => write!(f, "all"),
            Self::Future => write!(f, "future"),
            Self::Missing => write!(f, "missing"),
            Self::Existing => write!(f, "existing"),
            Self::FirstSeason => write!(f, "firstSeason"),
            Self::LastSeason => write!(f, "lastSeason"),
            Self::LatestSeason => write!(f, "latestSeason"),
            Self::Pilot => write!(f, "pilot"),
            Self::Recent => write!(f, "recent"),
            Self::MonitorSpecials => write!(f, "monitorSpecials"),
            Self::UnmonitorSpecials => write!(f, "unmonitorSpecials"),
            Self::None => write!(f, "none"),
            Self::Skip => write!(f, "skip"),
        }
    }
}

impl Default for MonitorTypes {
    fn default() -> MonitorTypes {
        Self::Unknown
    }
}

