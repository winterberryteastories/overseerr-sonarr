/*
 * Sonarr
 *
 * Sonarr API docs - The v3 API docs apply to both v3 and v4 versions of Sonarr. Some functionality may only be available in v4 of the Sonarr application.
 *
 * The version of the OpenAPI document: v4.0.12.2823
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ManualImportReprocessResource {
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(rename = "path", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub path: Option<Option<String>>,
    #[serde(rename = "seriesId", skip_serializing_if = "Option::is_none")]
    pub series_id: Option<i32>,
    #[serde(rename = "seasonNumber", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub season_number: Option<Option<i32>>,
    #[serde(rename = "episodes", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub episodes: Option<Option<Vec<models::EpisodeResource>>>,
    #[serde(rename = "episodeIds", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub episode_ids: Option<Option<Vec<i32>>>,
    #[serde(rename = "quality", skip_serializing_if = "Option::is_none")]
    pub quality: Option<Box<models::QualityModel>>,
    #[serde(rename = "languages", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub languages: Option<Option<Vec<models::Language>>>,
    #[serde(rename = "releaseGroup", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub release_group: Option<Option<String>>,
    #[serde(rename = "downloadId", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub download_id: Option<Option<String>>,
    #[serde(rename = "customFormats", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub custom_formats: Option<Option<Vec<models::CustomFormatResource>>>,
    #[serde(rename = "customFormatScore", skip_serializing_if = "Option::is_none")]
    pub custom_format_score: Option<i32>,
    #[serde(rename = "indexerFlags", skip_serializing_if = "Option::is_none")]
    pub indexer_flags: Option<i32>,
    #[serde(rename = "releaseType", skip_serializing_if = "Option::is_none")]
    pub release_type: Option<models::ReleaseType>,
    #[serde(rename = "rejections", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub rejections: Option<Option<Vec<models::ImportRejectionResource>>>,
}

impl ManualImportReprocessResource {
    pub fn new() -> ManualImportReprocessResource {
        ManualImportReprocessResource {
            id: None,
            path: None,
            series_id: None,
            season_number: None,
            episodes: None,
            episode_ids: None,
            quality: None,
            languages: None,
            release_group: None,
            download_id: None,
            custom_formats: None,
            custom_format_score: None,
            indexer_flags: None,
            release_type: None,
            rejections: None,
        }
    }
}

