/*
 * Sonarr
 *
 * Sonarr API docs - The v3 API docs apply to both v3 and v4 versions of Sonarr. Some functionality may only be available in v4 of the Sonarr application.
 *
 * The version of the OpenAPI document: v4.0.12.2823
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Field {
    #[serde(rename = "order", skip_serializing_if = "Option::is_none")]
    pub order: Option<i32>,
    #[serde(rename = "name", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub name: Option<Option<String>>,
    #[serde(rename = "label", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub label: Option<Option<String>>,
    #[serde(rename = "unit", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub unit: Option<Option<String>>,
    #[serde(rename = "helpText", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub help_text: Option<Option<String>>,
    #[serde(rename = "helpTextWarning", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub help_text_warning: Option<Option<String>>,
    #[serde(rename = "helpLink", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub help_link: Option<Option<String>>,
    #[serde(rename = "value", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub value: Option<Option<serde_json::Value>>,
    #[serde(rename = "type", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<Option<String>>,
    #[serde(rename = "advanced", skip_serializing_if = "Option::is_none")]
    pub advanced: Option<bool>,
    #[serde(rename = "selectOptions", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub select_options: Option<Option<Vec<models::SelectOption>>>,
    #[serde(rename = "selectOptionsProviderAction", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub select_options_provider_action: Option<Option<String>>,
    #[serde(rename = "section", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub section: Option<Option<String>>,
    #[serde(rename = "hidden", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub hidden: Option<Option<String>>,
    #[serde(rename = "privacy", skip_serializing_if = "Option::is_none")]
    pub privacy: Option<models::PrivacyLevel>,
    #[serde(rename = "placeholder", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub placeholder: Option<Option<String>>,
    #[serde(rename = "isFloat", skip_serializing_if = "Option::is_none")]
    pub is_float: Option<bool>,
}

impl Field {
    pub fn new() -> Field {
        Field {
            order: None,
            name: None,
            label: None,
            unit: None,
            help_text: None,
            help_text_warning: None,
            help_link: None,
            value: None,
            r#type: None,
            advanced: None,
            select_options: None,
            select_options_provider_action: None,
            section: None,
            hidden: None,
            privacy: None,
            placeholder: None,
            is_float: None,
        }
    }
}

