/*
 * Sonarr
 *
 * Sonarr API docs - The v3 API docs apply to both v3 and v4 versions of Sonarr. Some functionality may only be available in v4 of the Sonarr application.
 *
 * The version of the OpenAPI document: v4.0.12.2823
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration};


/// struct for typed errors of method [`create_manual_import`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateManualImportError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_manual_import`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListManualImportError {
    UnknownValue(serde_json::Value),
}


pub async fn create_manual_import(configuration: &configuration::Configuration, manual_import_reprocess_resource: Option<Vec<models::ManualImportReprocessResource>>) -> Result<(), Error<CreateManualImportError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_manual_import_reprocess_resource = manual_import_reprocess_resource;

    let uri_str = format!("{}/api/v3/manualimport", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.query(&[("apikey", value)]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("X-Api-Key", value);
    };
    req_builder = req_builder.json(&p_manual_import_reprocess_resource);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<CreateManualImportError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn list_manual_import(configuration: &configuration::Configuration, folder: Option<&str>, download_id: Option<&str>, series_id: Option<i32>, season_number: Option<i32>, filter_existing_files: Option<bool>) -> Result<Vec<models::ManualImportResource>, Error<ListManualImportError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_folder = folder;
    let p_download_id = download_id;
    let p_series_id = series_id;
    let p_season_number = season_number;
    let p_filter_existing_files = filter_existing_files;

    let uri_str = format!("{}/api/v3/manualimport", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_folder {
        req_builder = req_builder.query(&[("folder", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_download_id {
        req_builder = req_builder.query(&[("downloadId", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_series_id {
        req_builder = req_builder.query(&[("seriesId", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_season_number {
        req_builder = req_builder.query(&[("seasonNumber", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_filter_existing_files {
        req_builder = req_builder.query(&[("filterExistingFiles", &param_value.to_string())]);
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.query(&[("apikey", value)]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("X-Api-Key", value);
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let content = resp.text().await?;
        let entity: Option<ListManualImportError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

